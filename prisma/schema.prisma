// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  nickName     String         @unique
  password     String
  point        Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  event        Boolean        @default(false)
  card         Card[]
  shop         Shop[]
  notification Notification[]
  purchase     Purchase[]
  pointLog     PointLog[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Card {
  id          String     @id @default(uuid())
  uniqueId    Int        @default(0)
  name        String
  grade       String     @default("common")
  genre       String     @default("unknwon")
  price       Int        @default(0)
  description String     @default("")
  imagePath   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  shop        Shop?
  purchase    Purchase[]
  exchange    Exchange[]
}

model Shop {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  card      Card     @relation(fields: [cardId], references: [id])
  cardId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  buyerId   String
  card      Card     @relation(fields: [cardId], references: [id])
  cardId    String
  createdAt DateTime @default(now())
}

model Exchange {
  id          Int      @id @default(autoincrement())
  requesterId String
  card        Card     @relation(fields: [cardId], references: [id])
  cardId      String
  targetCard  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      String   @default("pending")
}

model PointLog {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  point     Int?
  pointType String
  createdAt DateTime @default(now())
}
