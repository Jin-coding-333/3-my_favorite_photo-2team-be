generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  nickName     String         @unique
  password     String
  email        String         @unique
  point        Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  event        DateTime       @default(now())
  card         Card[]
  notification Notification[]
  pointLog     PointLog[]
  purchase     Purchase[]
  shop         Shop[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Card {
  id          String     @id @default(uuid())
  name        String
  grade       String     @default("common")
  genre       String     @default("unknwon")
  price       Int        @default(0)
  description String     @default("")
  imagePath   String
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  uniqueId    String     @default("")
  user        User       @relation(fields: [userId], references: [id])
  exchange    Exchange[]
  purchase    Purchase[]
  shop        Shop?
}

model Shop {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  card      Card     @relation(fields: [cardId], references: [id])
  cardId    String   @unique
  totalQuantity     Int      
  remainingQuantity Int    
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id        Int      @id @default(autoincrement())
  userId    String
  buyerId   String
  cardId    String
  createdAt DateTime @default(now())
  card      Card     @relation(fields: [cardId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Exchange {
  id          Int      @id @default(autoincrement())
  requesterId String
  cardId      String
  targetCard  String
  createdAt   DateTime @default(now())
  status      String   @default("pending")
  updatedAt   DateTime @updatedAt
  card        Card     @relation(fields: [cardId], references: [id])
}

model PointLog {
  id        Int      @id @default(autoincrement())
  userId    String
  point     Int?
  pointType String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
